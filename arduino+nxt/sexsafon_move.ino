#define Block1_A 9
#define Block1_B 8
#define Block1_T 11 

#define Block2_A 6
#define Block2_B 7
#define Block2_T 12

#define Block3_A 4
#define Block3_B 5
#define Block3_T 3



#include "GyverTimer.h"
#include "GyverButton.h"



GTimer myTimer(MS);
GTimer myTimer1(MS);



#define smaller 1
#define longer 0
#define motor_on 1
#define motor_off 0
#define comand A2


int step = 1;
int position_set = 1;


bool flag_hand = 1;



bool s1 = false;
bool s2 = false;
bool s3 = false;
bool s4 = false;
bool s5 = false;
bool s6 = false;
bool s7 = false;
bool s8 = false;
bool s9 = false;
bool s10 = false;
bool s11 = false;
bool s12 = false;
bool s13 = false;
bool s14 = false;
bool s16 = false;


////=========================================================================================================================================
void motor_run(int motor_number, int dir, int on_off) //// motor_number - motor, dir - rotation direction =1 - smaller = 0 -longer , on_off - 1 - on, 0 -off
{

  switch (motor_number) {
    case 1:
      //выполняется, когда motor_number равно 1
      if (on_off == motor_on)
      {
        if (dir == smaller)
        {
          if (motor_lower_position(1) == false)
          {
            digitalWrite(Block1_A, HIGH );
            digitalWrite(Block1_B, LOW);
          }
          else
          {
            digitalWrite(Block1_A, LOW);
            digitalWrite(Block1_B, LOW);
          }
        }
        else
        {
          digitalWrite(Block1_A, LOW);
          digitalWrite(Block1_B, HIGH);
        }
      }
      else
      {
        digitalWrite(Block1_A, LOW);
        digitalWrite(Block1_B, LOW);
      }


      break;
    /////// 8 times for each motor
    case 2:
      if (on_off == motor_on)
      {
        if (dir == smaller)
        {
          if (motor_lower_position(2) == false)
          {
            digitalWrite(Block2_A, HIGH);
            digitalWrite(Block2_B, LOW);
          }
          else
          {
            digitalWrite(Block2_A, LOW);
            digitalWrite(Block2_B, LOW);
          }
        }
        else
        {
          digitalWrite(Block2_A, LOW);
          digitalWrite(Block2_B, HIGH);
        }
      }
      else
      {
        digitalWrite(Block2_A, LOW);
        digitalWrite(Block2_B, LOW);
      }
      //выполняется когда  motor_number равно 2
      break;

    case 3:
      if (on_off == motor_on)
      {
        if (dir == smaller)
        {
          if (motor_lower_position(3) == false)
          {
            digitalWrite(Block3_A, HIGH);
            digitalWrite(Block3_B, LOW);
          }
          else
          {
            digitalWrite(Block3_A, LOW);
            digitalWrite(Block3_B, LOW);
          }
        }
        else
        {
          digitalWrite(Block3_A, LOW);
          digitalWrite(Block3_B, HIGH);
        }
      }
      else
      {
        digitalWrite(Block3_A, LOW);
        digitalWrite(Block3_B, LOW);
      }
      //выполняется когда  motor_number равно 3
      break;
    default:
      {

        digitalWrite(Block3_A, LOW);
        digitalWrite(Block3_B, LOW);
        digitalWrite(Block2_A, LOW);
        digitalWrite(Block2_B, LOW);
        digitalWrite(Block1_A, LOW);
        digitalWrite(Block1_B, LOW);
      }
      // выполняется, если не выбрана ни одна альтернатива
      // default необязателен
  }

}


bool motor_lower_position(int motor_number)
{
  bool result = false;

  switch (motor_number) {
    case 1:
      //выполняется, когда motor_number равно 1
      if ((digitalRead(Block1_T) == HIGH)){
        result = true;
      }
    //  if (digitalRead(Block1_T) == 0) result = true;
      break;
    case 2:
      //выполняется когда motor_number  равно 2
      if (digitalRead(Block2_T) == HIGH) result = true;
      break;

    case 3:
      //выполняется когда motor_number  равно 3
      if (digitalRead(Block3_T) == HIGH) result = true;
      break;
  }

  return result;

}


byte motors_set_activation[3] = {motor_off, motor_off, motor_off};
byte motors_set_activation_type[3] = {smaller, smaller, smaller};
int motors_set_time_ms[3] = {0, 0, 0};
GTimer Timer_motor1(MS);
GTimer Timer_motor2(MS);
GTimer Timer_motor3(MS);


//////===================================================================================================================================================================================================
void motors_set()
{
  

  for (int i = 1; i < 4; i++) {
    if (motors_set_activation[i - 1] == motor_on) {
      if (motors_set_activation_type[i - 1] == longer) {
        motor_run(i, longer, motor_on);
      }
      else {
        motor_run(i, smaller, motor_on);

      }
    }
    else {
      motor_run(i, smaller, motor_off);

    }
  }




  if (motors_set_time_ms[0] > 0) {
    Timer_motor1.setInterval(motors_set_time_ms[0]);   // запуск в режиме интервала time_to_long_ms мс
    Timer_motor1.start();
  }

  if (motors_set_time_ms[1] > 0) {
    Timer_motor2.setInterval(motors_set_time_ms[1]);   // запуск в режиме интервала time_to_long_ms мс
    Timer_motor2.start();
  }

  if (motors_set_time_ms[2] > 0) {
    Timer_motor3.setInterval(motors_set_time_ms[2]);   // запуск в режиме интервала time_to_long_ms мс
    Timer_motor3.start();
  }



  bool flag = true;

  int motor_stopped = 0;

  bool flag_motors_stopped[3] = {false, false, false};

  for (int i = 1; i < 5; i++)
  {
    if (motors_set_activation[i - 1] == motor_off) {
      flag_motors_stopped[i - 1] = true;
      motor_stopped = motor_stopped + 1;
    }
  }

  while (flag == true)
  {
  


    for (int i = 1; i < 4; i++)
    {

      if (motors_set_activation[i - 1] == motor_on) {
        if (motors_set_activation_type[i - 1] == smaller) {

          switch (i) {
            case 1:
              delay(10);
              if ( ((motors_set_time_ms[0] > 0) && (Timer_motor1.isReady())) || (motor_lower_position(1) == true)  ) {
                motor_run(1, smaller, motor_off);
                motors_set_activation[0] = motor_off;


                flag_motors_stopped[0] = true;
                motor_stopped = motor_stopped + 1;


              }
              break;

            case 2:
              delay(10);
              if ( ((motors_set_time_ms[1] > 0) && (Timer_motor2.isReady())) || (motor_lower_position(2) == true)  ) {
                motor_run(2, smaller, motor_off);
                motors_set_activation[1] = motor_off;


                flag_motors_stopped[1] = true;
                motor_stopped = motor_stopped + 1;

              }
              break;

            case 3:
              delay(10);
              if ( ((motors_set_time_ms[2] > 0) && (Timer_motor3.isReady())) || (motor_lower_position(3) == true)  ) {
                motor_run(3, smaller, motor_off);
                motors_set_activation[2] = motor_off;


                flag_motors_stopped[2] = true;
                motor_stopped = motor_stopped + 1;

              }
              break;
          }

        }
        else { /// motor=on to longer

          switch (i) {
            case 1:
              delay(10);
              if (Timer_motor1.isReady()) {
                motor_run(1, longer, motor_off);
                motors_set_activation[0] = motor_off;

                flag_motors_stopped[0] = true;
                motor_stopped = motor_stopped + 1;

              }
              break;

            case 2:
              delay(10);
              if (Timer_motor2.isReady()) {
                motor_run(2, longer, motor_off);
                motors_set_activation[1] = motor_off;

                flag_motors_stopped[1] = true;
                motor_stopped = motor_stopped + 1;


              }
              break;

            case 3:
              delay(10);
              if (Timer_motor3.isReady()) {
                motor_run(3, longer, motor_off);
                motors_set_activation[2] = motor_off;

                flag_motors_stopped[2] = true;
                motor_stopped = motor_stopped + 1;


              }
              break;
          }

        }
      }
    }


    flag = false;
    for (int i = 1; i < 4; i++) {
      if (flag_motors_stopped[i - 1] == false) {
        flag = true;
      }
    }

  }

  //// stop all motors
  for (int i = 1; i < 4; i++) motor_run(i, smaller, motor_off);


  Timer_motor1.stop();
  Timer_motor2.stop();
  Timer_motor3.stop();


  for (int i = 1; i < 4; i++) {
    motors_set_activation[i - 1] = motor_off;
    motors_set_activation_type[i - 1] = smaller;
    motors_set_time_ms[i - 1] = 0;
    flag_motors_stopped[i - 1] = false;
  }

}

//////===================================================================================
void motors_set_init(int motor_number_set_init, int type_activation_set_init, int time_ms_set_init)
{
  if ((motor_number_set_init > 0) && (motor_number_set_init < 4)) {
    motors_set_activation[motor_number_set_init - 1] = motor_on;
    if (type_activation_set_init == longer) {
      motors_set_activation_type[motor_number_set_init - 1] = longer;
    }
    else
    {
      motors_set_activation_type[motor_number_set_init - 1] = smaller;
    }

    motors_set_time_ms[motor_number_set_init - 1] = time_ms_set_init;
  }
}

void play_motor1(){
}

void niz(){
  for (int i = 1; i < 1000; i++){
    motors_set_init(3, smaller, 50);
    motors_set();
    delay(50);
  }
}


void start_motor1(){    
        motors_set_init(1, longer, 3000);  
        motors_set();  
}

int led = 0;
int ledState = 0; 
void setup() {
  pinMode(Block1_A , OUTPUT);
  pinMode(Block1_B , OUTPUT);
  pinMode(Block1_T, INPUT);
  
  pinMode(Block2_A , OUTPUT);
  pinMode(Block2_B , OUTPUT);
  pinMode(Block2_T, INPUT);

  pinMode(Block3_A , OUTPUT);
  pinMode(Block3_B , OUTPUT);
  pinMode(Block3_T, INPUT);
  
  pinMode(A1 , INPUT_PULLUP);
  pinMode(A2 , INPUT_PULLUP);
  pinMode(A3 , INPUT_PULLUP);
  pinMode(A4 , INPUT_PULLUP);
    
  Serial.begin(9600);
  motors_set_init(2, smaller, 0);  
  motors_set_init(1, smaller, 0);  
  motors_set_init(3, smaller, 0);  
  motors_set();
   
  motors_set_init(1, longer, 3200);
  motors_set_init(2, longer, 2000);  
  motors_set_init(3, longer, 5000);  
  motors_set();  
  

}

void loop() {
 
 if((digitalRead(A1) == 1) && (digitalRead(A2) == 0) &&(digitalRead(A3) == 0) &&(digitalRead(A4) == 0) && (s1 == false)){
     motors_set_init(2, smaller, 0); 
     motors_set(); 
     
     motors_set_init(1, smaller, 0); 
     motors_set(); 
     s1 = true; 
     s2 = false; 
     s3 = false; 
     s4 = false;   
   }
if((digitalRead(A1) == 0) && (digitalRead(A2) == 1) &&(digitalRead(A3) == 0) &&(digitalRead(A4) == 0) && (s2 == false)){
     motors_set_init(1, longer, 3200);
     motors_set(); 
     s1 = false; 
     s2 = true; 
     s3 = false; 
     s4 = false;  
   }
   
if((digitalRead(A1) == 0) && (digitalRead(A2) == 0) &&(digitalRead(A3) == 1) &&(digitalRead(A4) == 0) && (s3 == false)){
 
     motors_set_init(1, longer, 3200);
     motors_set(); 
  
    motors_set_init(2, longer, 2000);  
    motors_set();  
     s1 = false; 
     s2 = false; 
     s3 = true; 
     s4 = false;  
   }

///////////////////////  ////////////////////////////////// ///////////////////////////////  /////////////////////////////
if((digitalRead(A1) == 0) && (digitalRead(A2) == 0) &&(digitalRead(A3) == 0) &&(digitalRead(A4) == 1) && (s5 == false)){
    
     motors_set_init(3, smaller, 0); 
     motors_set(); 
     s1 = false; 
     s2 = false; 
     s3 = false; 
     s4 = false; 
     s5 = true;   
     s6 = false; 
     s7 = false; 
   }
if((digitalRead(A1) == 0) && (digitalRead(A2) == 0) &&(digitalRead(A3) == 1) &&(digitalRead(A4) == 1) && (s6 == false)){
    
     motors_set_init(3, longer, 8000); 
     motors_set(); 
     s1 = false; 
     s2 = false; 
     s3 = false; 
     s4 = false; 
     s5 = false; 
     s6 = true;
     s7 = false;    
   }
if((digitalRead(A1) == 0) && (digitalRead(A2) == 1) &&(digitalRead(A3) == 1) &&(digitalRead(A4) == 1) && (s7 == false)){
    
     motors_set_init(3, smaller, 0); 
     motors_set(); 
     
     motors_set_init(3, longer, 5000); 
     motors_set(); 
     s1 = false; 
     s2 = false; 
     s3 = false; 
     s4 = false; 
     s5 = false; 
     s6 = false; 
     s7 = true;   
   }

 delay(10);
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
